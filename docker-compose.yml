# Smart Tourist Safety System - Complete Deployment Configuration
# Docker Compose for Web Dashboard, Backend API, Database, and Blockchain Infrastructure

version: '3.8'

services:
  # ============================================================================
  # WEB FRONTEND - Next.js Dashboard
  # ============================================================================
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
      target: production
    image: smart-tourist-safety/web:latest
    container_name: sts-web
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_APP_URL=http://localhost:3000
      - NEXT_PUBLIC_API_URL=http://backend:3001
      - NEXT_PUBLIC_WS_URL=ws://localhost:3001
      - NEXT_PUBLIC_BLOCKCHAIN_NETWORK=polygon
      - NEXT_PUBLIC_SUPABASE_URL=${SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
    depends_on:
      - backend
      - postgres
    networks:
      - sts-network
    volumes:
      - web-static:/app/.next/static
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ============================================================================
  # BACKEND API - Next.js API Routes + Blockchain
  # ============================================================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    image: smart-tourist-safety/backend:latest
    container_name: sts-backend
    restart: unless-stopped
    ports:
      - "3001:3001"
      - "8545:8545"  # Hardhat/Ethereum node
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/smart_tourist_safety
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - BLOCKCHAIN_NETWORK=localhost
      - BLOCKCHAIN_RPC_URL=http://localhost:8545
      - PRIVATE_KEY=${BLOCKCHAIN_PRIVATE_KEY}
      - CONTRACT_DEPLOYER_ADDRESS=${CONTRACT_DEPLOYER_ADDRESS}
      - REDIS_URL=redis://redis:6379
      - CORS_ORIGIN=http://localhost:3000
    depends_on:
      - postgres
      - redis
    networks:
      - sts-network
    volumes:
      - blockchain-data:/app/blockchain
      - uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s

  # ============================================================================
  # POSTGRESQL DATABASE - Primary Data Storage
  # ============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: sts-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=smart_tourist_safety
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backend/src/database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./backend/src/database/migrations:/docker-entrypoint-initdb.d/migrations
      - ./backend/src/database/seeds:/docker-entrypoint-initdb.d/seeds
    networks:
      - sts-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d smart_tourist_safety"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # ============================================================================
  # REDIS - Caching & Session Storage
  # ============================================================================
  redis:
    image: redis:7-alpine
    container_name: sts-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    networks:
      - sts-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # ETHEREUM NODE - Local Blockchain for Development
  # ============================================================================
  hardhat-node:
    build:
      context: ./backend
      dockerfile: Dockerfile.hardhat
    image: smart-tourist-safety/hardhat:latest
    container_name: sts-hardhat
    restart: unless-stopped
    ports:
      - "8545:8545"
    environment:
      - NETWORK=localhost
      - CHAIN_ID=31337
    volumes:
      - blockchain-data:/app/data
      - ./backend/contracts:/app/contracts
      - ./backend/scripts:/app/scripts
    networks:
      - sts-network
    command: npx hardhat node --hostname 0.0.0.0 --port 8545
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8545"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # NGINX REVERSE PROXY - Load Balancer & SSL
  # ============================================================================
  nginx:
    image: nginx:alpine
    container_name: sts-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - web-static:/var/www/static
    depends_on:
      - web
      - backend
    networks:
      - sts-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================================================
  # MONITORING & OBSERVABILITY
  # ============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: sts-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - sts-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: sts-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SERVER_ROOT_URL=http://localhost:3001
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - sts-network
    depends_on:
      - prometheus

# ============================================================================
# DOCKER VOLUMES - Persistent Data Storage
# ============================================================================
volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  blockchain-data:
    driver: local
  uploads:
    driver: local
  web-static:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# ============================================================================
# DOCKER NETWORKS - Service Communication
# ============================================================================
networks:
  sts-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ============================================================================
# PRODUCTION CONFIGURATION NOTES
# ============================================================================
# 
# Environment Variables Required (.env file):
# - POSTGRES_PASSWORD=secure_postgres_password
# - SUPABASE_URL=your_supabase_project_url
# - SUPABASE_ANON_KEY=your_supabase_anon_key
# - SUPABASE_SERVICE_KEY=your_supabase_service_key
# - JWT_SECRET=your_jwt_secret_key
# - JWT_REFRESH_SECRET=your_jwt_refresh_secret
# - ENCRYPTION_KEY=your_32_character_encryption_key
# - BLOCKCHAIN_PRIVATE_KEY=your_blockchain_private_key
# - CONTRACT_DEPLOYER_ADDRESS=your_contract_deployer_address
# - REDIS_PASSWORD=your_redis_password
# - GRAFANA_PASSWORD=your_grafana_admin_password
# 
# Deployment Commands:
# 1. docker-compose up -d --build         # Build and start all services
# 2. docker-compose logs -f web           # Monitor web service logs
# 3. docker-compose exec backend npm run migrate  # Run database migrations
# 4. docker-compose exec backend npm run seed     # Seed initial data
# 5. docker-compose down -v               # Stop and remove all services
# 
# Health Monitoring:
# - Web Dashboard: http://localhost:3000
# - Backend API: http://localhost:3001/api/health
# - Database: postgresql://localhost:5432/smart_tourist_safety
# - Blockchain: http://localhost:8545
# - Monitoring: http://localhost:9090 (Prometheus), http://localhost:3001 (Grafana)
# 
# Security Considerations:
# - All secrets should be in environment variables
# - SSL certificates should be mounted for production
# - Database backups should be automated
# - Container images should be scanned for vulnerabilities
# - Network policies should restrict inter-service communication
# 
# Scaling Options:
# - Use docker-compose scale web=3 for horizontal scaling
# - Implement container orchestration with Kubernetes
# - Set up auto-scaling based on CPU/memory metrics
# - Use external load balancers for production traffic
#